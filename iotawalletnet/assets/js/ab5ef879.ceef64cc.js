"use strict";(self.webpackChunkiotawallet_net_docs=self.webpackChunkiotawallet_net_docs||[]).push([[827],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,k=p["".concat(c,".").concat(m)]||p[m]||d[m]||r;return t?o.createElement(k,i(i({ref:n},u),{},{components:t})):o.createElement(k,i({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=t(7462),a=(t(7294),t(3905));const r={sidebar_position:3},i="Melt Native Tokens",l={unversionedId:"How To/Native Tokens/Melt",id:"How To/Native Tokens/Melt",title:"Melt Native Tokens",description:"Code Example",source:"@site/docs/How To/Native Tokens/Melt.md",sourceDirName:"How To/Native Tokens",slug:"/How To/Native Tokens/Melt",permalink:"/iotawalletnet/docs/How To/Native Tokens/Melt",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Send Native Tokens",permalink:"/iotawalletnet/docs/How To/Native Tokens/Send"},next:{title:"Burn Native Tokens",permalink:"/iotawalletnet/docs/How To/Native Tokens/Burn"}},c={},s=[{value:"Code Example",id:"code-example",level:2}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"melt-native-tokens"},"Melt Native Tokens"),(0,a.kt)("h2",{id:"code-example"},"Code Example"),(0,a.kt)("p",null,"The following example will:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Initialize your account"),(0,a.kt)("li",{parentName:"ol"},"Retrieve your ",(0,a.kt)("inlineCode",{parentName:"li"},"cookiemonster")," account"),(0,a.kt)("li",{parentName:"ol"},"Retrieve your balance and check for current number of melted tokens"),(0,a.kt)("li",{parentName:"ol"},"Proceed to Melt 10 tokens"),(0,a.kt)("li",{parentName:"ol"},"Wait for tangle consensus and resync, following that check if the number of melted tokens have increased")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'    public class MeltNativeTokensExample\n    {\n        public static async Task Run()\n        {\n            //Register all of the dependencies into a collection of services\n            IServiceCollection services = new ServiceCollection().AddIotaWalletServices();\n\n            //Install services to service provider which is used for dependency injection\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n            //Use serviceprovider to create a scope, which disposes of all services at end of scope\n            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                //Request IWallet service from service provider\n                IWallet wallet = scope.ServiceProvider.GetRequiredService<IWallet>();\n\n                //Build wallet using a fluent-style configuration api\n                wallet = wallet\n                            .ConfigureWalletOptions()\n                                .SetCoinType(TypeOfCoin.Shimmer)\n                                .SetStoragePath("./walletdb")\n                                .Then()\n                            .ConfigureClientOptions()\n                                .AddNodeUrl("https://api.testnet.shimmer.network")\n                                .SetFaucetUrl("https://faucet.testnet.shimmer.network")\n                                .IsFallbackToLocalPow()\n                                .IsLocalPow()\n                                .Then()\n                            .ConfigureSecretManagerOptions()\n                                .SetPassword("password")\n                                .SetSnapshotPath("./mystronghold")\n                                .Then()\n                            .Initialize();\n\n\n                //Let\'s retrieve our cookiemonster account\n                (GetAccountResponse accountResponse, IAccount? account) = await wallet.GetAccountAsync("cookiemonster");\n                Console.WriteLine($"GetAccountAsync: {accountResponse}");\n\n                if (account == null)\n                {\n                    Console.WriteLine("There was a problem retreiving the account.");\n                    return;\n                }\n\n                SyncAccountResponse syncAccountResponse = await account.SyncAccountAsync();\n                Console.WriteLine($"SyncAccountAsync: {syncAccountResponse}");\n\n                GetBalanceResponse getBalanceResponse = await account.GetBalanceAsync();\n                Console.WriteLine($"GetBalanceAsync: {getBalanceResponse}");\n\n                /*\n                 * You can get a specific native token by looking at the tokenId.\n                 * For this example, we are just getting the first native token available which has atleast 10 tokens,\n                 * since we are intending to melt 10 tokens.\n                 * */\n                NativeTokenBalance? nativeTokenBalance = getBalanceResponse.Payload?.NativeTokens?.First(nativeTokenBalance => nativeTokenBalance.Available.FromHexEncodedAmountToInt64() > 10);\n\n                if (nativeTokenBalance == null)\n                {\n                    throw new Exception("No native tokens found that has atleast 10 tokens available...");\n                }\n\n                string tokenId = nativeTokenBalance.TokenId;\n\n                GetFoundryOutputResponse getFoundryOutputResponse = await account.GetFoundryOutputAsync(tokenId);\n                SimpleTokenScheme simpleTokenScheme = (getFoundryOutputResponse.Payload!.TokenScheme as SimpleTokenScheme)!;\n                ulong originalNumberOfMeltedTokens = simpleTokenScheme.MeltedTokens.FromHexEncodedAmountToUInt64();\n                ulong totalMintedSupply = simpleTokenScheme.MintedTokens.FromHexEncodedAmountToUInt64();\n                ulong totalMaximumSupply = simpleTokenScheme.MaximumSupply.FromHexEncodedAmountToUInt64();\n                Console.WriteLine($"Melted: {originalNumberOfMeltedTokens}\\nMinted: {totalMintedSupply}\\nMax: {totalMaximumSupply}");\n\n\n                string amount = 10.ToHexEncodedAmount();\n                \n                MeltNativeTokensResponse meltNativeTokensResponse = await account.MeltNativeTokensAsync(tokenId, amount);\n\n                Thread.Sleep(12000);\n\n                await account.SyncAccountAsync();\n\n                getFoundryOutputResponse = await account.GetFoundryOutputAsync(tokenId);\n                simpleTokenScheme = (getFoundryOutputResponse.Payload!.TokenScheme as SimpleTokenScheme)!;\n                ulong latestNumberOfMeltedTokens = simpleTokenScheme.MeltedTokens.FromHexEncodedAmountToUInt64();\n\n                if (latestNumberOfMeltedTokens > originalNumberOfMeltedTokens)\n                    Console.WriteLine($"Melted {amount.FromHexEncodedAmountToInt64()} number of tokens successfully.");\n                else\n                    throw new Exception("Melting of tokens was unsuccessful or you might have to wait longer for your transaction to be confirmed.");\n            }\n        }\n\n    }\n')))}p.isMDXComponent=!0}}]);