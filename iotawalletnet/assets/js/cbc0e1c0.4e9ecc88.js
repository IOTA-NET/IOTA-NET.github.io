"use strict";(self.webpackChunktestdocs=self.webpackChunktestdocs||[]).push([[169],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},v=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=l(t),v=a,y=u["".concat(c,".").concat(v)]||u[v]||d[v]||i;return t?o.createElement(y,s(s({ref:n},p),{},{components:t})):o.createElement(y,s({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=v;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r[u]="string"==typeof e?e:a,s[1]=r;for(var l=2;l<i;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}v.displayName="MDXCreateElement"},9484:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const i={sidebar_position:1},s="Mint Native Tokens",r={unversionedId:"How To/Native Tokens/Mint",id:"How To/Native Tokens/Mint",title:"Mint Native Tokens",description:"Code Example",source:"@site/docs/How To/Native Tokens/Mint.md",sourceDirName:"How To/Native Tokens",slug:"/How To/Native Tokens/Mint",permalink:"/iotawalletnet/docs/How To/Native Tokens/Mint",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Native Tokens",permalink:"/iotawalletnet/docs/category/native-tokens"},next:{title:"Mint Native Tokens",permalink:"/iotawalletnet/docs/How To/Native Tokens/Send"}},c={},l=[{value:"Code Example",id:"code-example",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mint-native-tokens"},"Mint Native Tokens"),(0,a.kt)("h2",{id:"code-example"},"Code Example"),(0,a.kt)("p",null,"The following example will:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Initialize your account"),(0,a.kt)("li",{parentName:"ol"},"Retrieve your ",(0,a.kt)("inlineCode",{parentName:"li"},"cookiemonster")," account"),(0,a.kt)("li",{parentName:"ol"},"Retrieve your balance and check for any existence of Alias outputs"),(0,a.kt)("li",{parentName:"ol"},"If there are no Alias outputs, create one"),(0,a.kt)("li",{parentName:"ol"},"Create NativeTokenIRC30 metadata"),(0,a.kt)("li",{parentName:"ol"},"Mint NativeTokens")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'    public static class MintNativeTokensExample\n    {\n        public static async Task Run()\n        {\n            //Register all of the dependencies into a collection of services\n            IServiceCollection services = new ServiceCollection().AddIotaWalletServices();\n\n            //Install services to service provider which is used for dependency injection\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n            //Use serviceprovider to create a scope, which disposes of all services at end of scope\n            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                //Request IWallet service from service provider\n                IWallet wallet = scope.ServiceProvider.GetRequiredService<IWallet>();\n\n                //Build wallet using a fluent-style configuration api\n                wallet = wallet\n                            .ConfigureWalletOptions()\n                                .SetCoinType(TypeOfCoin.Shimmer)\n                                .SetStoragePath("./walletdb")\n                                .Then()\n                            .ConfigureClientOptions()\n                                .AddNodeUrl("https://api.testnet.shimmer.network")\n                                .SetFaucetUrl("https://faucet.testnet.shimmer.network")\n                                .IsFallbackToLocalPow()\n                                .IsLocalPow()\n                                .Then()\n                            .ConfigureSecretManagerOptions()\n                                .SetPassword("password")\n                                .SetSnapshotPath("./mystronghold")\n                                .Then()\n                            .Initialize();\n\n\n                //Let\'s retrieve our cookiemonster account\n                (GetAccountResponse accountResponse, IAccount? account) = await wallet.GetAccountAsync("cookiemonster");\n                Console.WriteLine($"GetAccountAsync: {accountResponse}");\n\n                if (account == null)\n                {\n                    Console.WriteLine("There was a problem retreiving the account.");\n                    return;\n                }\n\n                /*\n                 * Let\'s sync and get the balance of our account. We need to check if we have an alias output\n                 * An alias output is needed to keep track of foundries.\n                 * A foundry output is an output that controls the supply of user defined native tokens. \n                 * It can mint and melt tokens according to the policy defined in the Token Scheme field of the output. \n                 * Foundries can only be created and controlled by aliases.\n                 */\n                SyncAccountResponse syncAccountResponse = await account.SyncAccountAsync();\n                Console.WriteLine($"SyncAccountAsync: {syncAccountResponse}");\n\n                GetBalanceResponse getBalanceResponse = await account.GetBalanceAsync();\n                Console.WriteLine($"GetBalanceAsync: {getBalanceResponse}");\n\n                //Get alias outputs\n                var aliases = getBalanceResponse.Payload?.Aliases;\n\n                //Create an alias output if we don\'t have one\n                if (aliases == null || !aliases.Any())\n                {\n                    CreateAliasOutputResponse createAliasOutputResponse = await account.CreateAliasOutputAsync(new AliasOutputOptions());\n                    Console.WriteLine($"CreateAliasOutputAsync: {createAliasOutputResponse}");\n\n                    syncAccountResponse = await account.SyncAccountAsync();\n                    Console.WriteLine($"SyncAccountAsync: {syncAccountResponse}");\n\n                    getBalanceResponse = await account.GetBalanceAsync();\n                    Console.WriteLine($"GetBalanceAsync: {getBalanceResponse}");\n\n                    aliases = getBalanceResponse.Payload?.Aliases;\n\n                    if (aliases == null || !aliases.Any())\n                    {\n                        throw new Exception("No aliases found. Alias output is needed to mint native tokens.");\n                    }\n                }\n\n                string hexEncodedCirculatingSupply = "1000000".ToHexString();\n                string hexEncodedMaximumSupply = "1500000".ToHexString();\n\n                NativeTokenIRC30 nativeTokenMetadata = new NativeTokenIRC30(name: "iotanet", symbol:"inet", decimals:6)\n                                                        .SetDescription("Just a test coin")\n                                                        .SetUrl("https://github.com/IOTA-NET/IotaWallet.NET");\n\n                string nativeTokenMetadataJson = JsonConvert.SerializeObject(nativeTokenMetadata);\n\n                NativeTokenOptions nativeTokenOptions = new NativeTokenOptions(hexEncodedCirculatingSupply, hexEncodedMaximumSupply)\n                {\n                    FoundryMetadata = nativeTokenMetadataJson.ToHexString(),\n                };\n\n                MintNativeTokensResponse mintNativeTokensResponse = await account.MintNativeTokensAsync(nativeTokenOptions);\n                Console.WriteLine($"MintNativeTokensAsync: {mintNativeTokensResponse}");\n                Thread.Sleep(10000);\n\n                /* Sync and Get native token balances */\n                await account.SyncAccountAsync();\n                GetBalanceResponse response = await account.GetBalanceAsync();\n                List<NativeTokenBalance> nativeTokenBalances = response.Payload!.NativeTokens;\n\n                if (nativeTokenBalances.Any())\n                    Console.WriteLine($"{JsonConvert.SerializeObject(response.Payload.NativeTokens, Formatting.Indented)}");\n            }\n\n        }\n\n\n    }\n    \n')))}u.isMDXComponent=!0}}]);