"use strict";(self.webpackChunktestdocs=self.webpackChunktestdocs||[]).push([[3927],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return n?o.createElement(m,a(a({ref:t},p),{},{components:n})):o.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},a="Mint NFTs",s={unversionedId:"How To/NFTs/Mint",id:"How To/NFTs/Mint",title:"Mint NFTs",description:"Code Example",source:"@site/docs/How To/NFTs/Mint.md",sourceDirName:"How To/NFTs",slug:"/How To/NFTs/Mint",permalink:"/iotawalletnet/docs/How To/NFTs/Mint",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"NFTs",permalink:"/iotawalletnet/docs/category/nfts"},next:{title:"Send NFTs",permalink:"/iotawalletnet/docs/How To/NFTs/Send"}},l={},c=[{value:"Code Example",id:"code-example",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mint-nfts"},"Mint NFTs"),(0,r.kt)("h2",{id:"code-example"},"Code Example"),(0,r.kt)("p",null,"The following example will:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Initialize your account"),(0,r.kt)("li",{parentName:"ol"},"Retrieve your ",(0,r.kt)("inlineCode",{parentName:"li"},"cookiemonster")," account"),(0,r.kt)("li",{parentName:"ol"},"Upload 2 jpg images to ipfs using the sia network (Note you can use any upload method you wish)"),(0,r.kt)("li",{parentName:"ol"},"Create our nft immutable attributes"),(0,r.kt)("li",{parentName:"ol"},"Mint the nfts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'    public static class MintNftExample\n    {\n        public static async Task Run()\n        {\n            //Register all of the dependencies into a collection of services\n            IServiceCollection services = new ServiceCollection().AddIotaWalletServices();\n\n            //Install services to service provider which is used for dependency injection\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n            //Use serviceprovider to create a scope, which disposes of all services at end of scope\n            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                //Request IWallet service from service provider\n                IWallet wallet = scope.ServiceProvider.GetRequiredService<IWallet>();\n\n                //Build wallet using a fluent-style configuration api\n                wallet = wallet\n                            .ConfigureWalletOptions()\n                                .SetCoinType(TypeOfCoin.Shimmer)\n                                .SetStoragePath("./walletdb")\n                                .Then()\n                            .ConfigureClientOptions()\n                                .AddNodeUrl("https://api.testnet.shimmer.network")\n                                .SetFaucetUrl("https://faucet.testnet.shimmer.network")\n                                .IsFallbackToLocalPow()\n                                .IsLocalPow()\n                                .Then()\n                            .ConfigureSecretManagerOptions()\n                                .SetPassword("password")\n                                .SetSnapshotPath("./mystronghold")\n                                .Then()\n                            .Initialize();\n\n\n                //Let\'s retrieve our cookiemonster account\n                (GetAccountResponse accountResponse, IAccount? account) = await wallet.GetAccountAsync("cookiemonster");\n                Console.WriteLine($"GetAccountAsync: {accountResponse}");\n\n                if (account == null)\n                {\n                    Console.WriteLine("There was a problem retreiving the account.");\n                    return;\n                }\n\n                //Sync account\n                await account.SyncAccountAsync();\n\n                string[] filesToUpload = new string[] { "blackcat.jpg", "whitecat.jpg" };\n                List<string> urlsOfUploadedFiles = new List<string>();\n\n                //We will be leveraging Sia for free ipfs storage for 90 days\n                string siaSkynetPortalUrl = "https://web3portal.com/";\n                SiaSkynetClient siaSkynetClient = new SiaSkynetClient(baseUrl: siaSkynetPortalUrl);\n                foreach (string fileToUpload in filesToUpload)\n                {\n                    using (FileStream fileStream = File.OpenRead(fileToUpload))\n                    {\n                        SkyfileResponse skyfileResponse = await siaSkynetClient.UploadFileAsync(fileToUpload, fileStream);\n                        urlsOfUploadedFiles.Add($"{siaSkynetPortalUrl}{skyfileResponse.Skylink}");\n                    }\n                }\n\n                //Lets prepare our nfts\n                NFTIRC27 nft1 = new NFTIRC27(KnownMimeTypes.Jpg, "Cats #003", urlsOfUploadedFiles[0])\n                                .SetCollectionName("Pussy")\n                                .SetDescription("A collection of cats")\n                                .SetIssuerName("CookieMonster")\n                                .AddAttribute("Colour", "Black")\n                                .AddAttribute("Weight", "1kg")\n                                .AddInternalAttribute("foreignKey", "OWN1112")\n                                .AddInternalAttribute("primaryKey", "PC003");\n\n                NFTIRC27 nft2 = new NFTIRC27(KnownMimeTypes.Jpg, "Cats #004", urlsOfUploadedFiles[1])\n                                .SetCollectionName("Pussy")\n                                .SetDescription("A collection of cats")\n                                .SetIssuerName("CookieMonster")\n                                .AddAttribute("Colour", "White")\n                                .AddAttribute("Weight", "2kg")\n                                .AddInternalAttribute("foreignKey", "OWN3224")\n                                .AddInternalAttribute("primaryKey", "PC004");\n\n\n                //Lets turn our nfts into immutable metadata\n                List<NftOptions> nftOptions = new List<NftOptions>()\n                {\n                    new NftOptions()\n                    {\n                        Tag = "iotawalletnet".ToHexString(),\n                        ImmutableMetadata = JsonConvert.SerializeObject(nft1).ToHexString(),\n                    },\n                    new NftOptions()\n                    {\n                        Tag = "iotawalletnet".ToHexString(),\n                        ImmutableMetadata = JsonConvert.SerializeObject(nft2).ToHexString(),\n                    },\n                };\n\n                //Mint our nfts!\n                MintNftsResponse mintNftsResponse = await account.MintNftsAsync(nftOptions);\n                Console.WriteLine($"MintNftsAsync: {mintNftsResponse}");\n\n            }\n        }\n    }\n')))}u.isMDXComponent=!0}}]);