"use strict";(self.webpackChunktestdocs=self.webpackChunktestdocs||[]).push([[7749],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},v=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),v=r,k=d["".concat(c,".").concat(v)]||d[v]||u[v]||a;return t?o.createElement(k,i(i({ref:n},p),{},{components:t})):o.createElement(k,i({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=v;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}v.displayName="MDXCreateElement"},2332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:2},i="Mint Native Tokens",s={unversionedId:"How To/Native Tokens/Send",id:"How To/Native Tokens/Send",title:"Mint Native Tokens",description:"Code Example",source:"@site/docs/How To/Native Tokens/Send.md",sourceDirName:"How To/Native Tokens",slug:"/How To/Native Tokens/Send",permalink:"/docs/How To/Native Tokens/Send",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Mint Native Tokens",permalink:"/docs/How To/Native Tokens/Mint"}},c={},l=[{value:"Code Example",id:"code-example",level:2}],p={toc:l};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mint-native-tokens"},"Mint Native Tokens"),(0,r.kt)("h2",{id:"code-example"},"Code Example"),(0,r.kt)("p",null,"The following example will:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Initialize your account"),(0,r.kt)("li",{parentName:"ol"},"Retrieve your ",(0,r.kt)("inlineCode",{parentName:"li"},"cookiemonster")," account"),(0,r.kt)("li",{parentName:"ol"},"Retrieve your balance"),(0,r.kt)("li",{parentName:"ol"},"Check if there exists any NativeTokens with atleast 10 tokens"),(0,r.kt)("li",{parentName:"ol"},"Send NativeTokens")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'     public class SendNativeTokensExample\n    {\n        public static async Task Run()\n        {\n            //Register all of the dependencies into a collection of services\n            IServiceCollection services = new ServiceCollection().AddIotaWalletServices();\n\n            //Install services to service provider which is used for dependency injection\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n            //Use serviceprovider to create a scope, which disposes of all services at end of scope\n            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                //Request IWallet service from service provider\n                IWallet wallet = scope.ServiceProvider.GetRequiredService<IWallet>();\n\n                //Build wallet using a fluent-style configuration api\n                wallet = wallet\n                            .ConfigureWalletOptions()\n                                .SetCoinType(TypeOfCoin.Shimmer)\n                                .SetStoragePath("./walletdb")\n                                .Then()\n                            .ConfigureClientOptions()\n                                .AddNodeUrl("https://api.testnet.shimmer.network")\n                                .SetFaucetUrl("https://faucet.testnet.shimmer.network")\n                                .IsFallbackToLocalPow()\n                                .IsLocalPow()\n                                .Then()\n                            .ConfigureSecretManagerOptions()\n                                .SetPassword("password")\n                                .SetSnapshotPath("./mystronghold")\n                                .Then()\n                            .Initialize();\n\n\n                //Let\'s retrieve our cookiemonster account\n                (GetAccountResponse accountResponse, IAccount? account) = await wallet.GetAccountAsync("cookiemonster");\n                Console.WriteLine($"GetAccountAsync: {accountResponse}");\n\n                if (account == null)\n                {\n                    Console.WriteLine("There was a problem retreiving the account.");\n                    return;\n                }\n\n                \n                SyncAccountResponse syncAccountResponse = await account.SyncAccountAsync();\n                Console.WriteLine($"SyncAccountAsync: {syncAccountResponse}");\n\n                GetBalanceResponse getBalanceResponse = await account.GetBalanceAsync();\n                Console.WriteLine($"GetBalanceAsync: {getBalanceResponse}");\n\n                /*\n                 * You can get a specific native token by looking at the tokenId.\n                 * For this example, we are just getting the first native token available which has atleast 10 tokens,\n                 * since we are intending to send 10 tokens.\n                 * */\n                NativeTokenBalance? nativeTokenBalance = getBalanceResponse.Payload?.NativeTokens?.First(nativeTokenBalance => int.Parse(nativeTokenBalance.Available.FromHexString()) > 10);\n\n                if (nativeTokenBalance == null)\n                {\n                    throw new Exception("No native tokens found that has atleast 10 tokens available...");\n                }\n\n                string tokenId = nativeTokenBalance.TokenId;\n                string amount = "10".ToHexString();\n\n                string receiverAddress = "rms1qrcagm98yyj983aan86wvvlgv8g72zspvhv40eynpmdn4ms8rmvrgkfqvfp";\n                AddressWithNativeTokens addressWithNativeTokens = new AddressWithNativeTokens(new List<string[]> { new string[] { tokenId, amount } }.ToList(), receiverAddress);\n                SendNativeTokensResponse sendNativeTokensResponse = await account.SendNativeTokensAsync(new AddressWithNativeTokens[] { addressWithNativeTokens }.ToList());\n                Console.WriteLine($"SendNativeTokensAsync: {addressWithNativeTokens}");\n\n                //For testnet\n                Console.WriteLine($"Check your block on https://explorer.shimmer.network/testnet/block/{sendNativeTokensResponse.Payload!.BlockId}");\n\n            }\n        }\n\n    }\n    \n')))}d.isMDXComponent=!0}}]);