"use strict";(self.webpackChunkiotawallet_net_docs=self.webpackChunkiotawallet_net_docs||[]).push([[536],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return t?o.createElement(m,i(i({ref:n},p),{},{components:t})):o.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6662:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:2},i="Wait for Transaction Confirmation",s={unversionedId:"How To/Events/WaitForTransactionConfirmation",id:"How To/Events/WaitForTransactionConfirmation",title:"Wait for Transaction Confirmation",description:"Code Example",source:"@site/docs/How To/Events/WaitForTransactionConfirmation.md",sourceDirName:"How To/Events",slug:"/How To/Events/WaitForTransactionConfirmation",permalink:"/iotawalletnet/docs/How To/Events/WaitForTransactionConfirmation",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Subscribe to Events",permalink:"/iotawalletnet/docs/How To/Events/Subscribe"}},c={},l=[{value:"Code Example",id:"code-example",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wait-for-transaction-confirmation"},"Wait for Transaction Confirmation"),(0,r.kt)("h2",{id:"code-example"},"Code Example"),(0,r.kt)("p",null,"The following example will:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Load our wallet"),(0,r.kt)("li",{parentName:"ol"},"Subscribe to events"),(0,r.kt)("li",{parentName:"ol"},"Enable Periodic Syncing"),(0,r.kt)("li",{parentName:"ol"},"Send a transaction and call ",(0,r.kt)("inlineCode",{parentName:"li"},"WaitForConfirmationAsync")," on the transaction")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'    public static class WaitForTransactionConfirmationExample\n    {\n        public static async Task Run()\n        {\n            //Register all of the dependencies into a collection of services\n            IServiceCollection services = new ServiceCollection().AddIotaWalletServices();\n\n            //Install services to service provider which is used for dependency injection\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n            //Use serviceprovider to create a scope, which disposes of all services at end of scope\n            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                //Request IWallet service from service provider\n                IWallet wallet = scope.ServiceProvider.GetRequiredService<IWallet>();\n\n                //Build wallet using a fluent-style configuration api\n                wallet = wallet\n                            .ConfigureWalletOptions()\n                                .SetCoinType(TypeOfCoin.Shimmer)\n                                .SetStoragePath("./walletdb")\n                                .Then()\n                            .ConfigureClientOptions()\n                                .AddNodeUrl("https://api.testnet.shimmer.network")\n                                .SetFaucetUrl("https://faucet.testnet.shimmer.network")\n                                .IsFallbackToLocalPow()\n                                .IsLocalPow()\n                                .Then()\n                            .ConfigureSecretManagerOptions()\n                                .SetPassword("password")\n                                .SetSnapshotPath("./mystronghold")\n                                .Then()\n                            .Initialize();\n\n                //We can subscrive to all events using WalletEventTypes.AllEvents\n                //Howevever for this example, is only focussed on waiting for a transaction to complete.\n                //Hence only the TransactionInclusion event is of interest.\n                wallet.SubscribeToEvents(WalletEventTypes.TransactionInclusion);\n\n\n                //Let\'s retrieve our cookiemonster account\n                (GetAccountResponse accountResponse, IAccount? account) = await wallet.GetAccountAsync("cookiemonster");\n\n                //We can also opt for periodic syncing of our account,\n                //so that we don\'t have to worry about manual syncing\n                //Below, we want to sync periodically 30 times.\n                //Set count to 0 for forever periodic syncing\n                account.EnablePeriodicSyncing(intervalInMilliSeconds: 3000, count: 30);\n\n                GetBalanceResponse getBalanceResponse = await account.GetBalanceAsync();\n                Console.WriteLine($"Current balance is : {getBalanceResponse.Payload!.BaseCoin.Total}");\n\n                //Let\'s send 1 shimmer, which is 1,000,000 Glow\n                string receiverAddress = "rms1qz9f7vecqscfynnxacyzefwvpza0wz3r0lnnwrc8r7qhx65s5x7rx2fln5q";\n\n                SendAmountResponse sendAmountResponse = await account.SendAmountUsingBuilder()\n                                                                        .AddAddressAndAmount(receiverAddress, 1000000)\n                                                                        .SendAmountAsync();\n                Transaction transaction = sendAmountResponse.Payload!;\n\n                //We will setup the event handler for you and let you proceed once we receive\n                //confirmation from the node that the transactionid has been confirmed.\n                await transaction.WaitForConfirmationAsync(wallet);\n\n                getBalanceResponse = await account.GetBalanceAsync();\n                Console.WriteLine($"New balance is : {getBalanceResponse.Payload!.BaseCoin.Total}");\n\n\n                await Task.Delay(200 * 1000);\n            }\n\n        }\n\n    }\n')))}u.isMDXComponent=!0}}]);