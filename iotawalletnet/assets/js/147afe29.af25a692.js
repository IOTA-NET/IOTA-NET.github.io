"use strict";(self.webpackChunkiotawallet_net_docs=self.webpackChunkiotawallet_net_docs||[]).push([[980],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:3},i="Send a Micro Transaction",s={unversionedId:"How To/Outputs and Transactions/Send a Micro Transaction",id:"How To/Outputs and Transactions/Send a Micro Transaction",title:"Send a Micro Transaction",description:"Code Example",source:"@site/docs/How To/Outputs and Transactions/Send a Micro Transaction.md",sourceDirName:"How To/Outputs and Transactions",slug:"/How To/Outputs and Transactions/Send a Micro Transaction",permalink:"/iotawalletnet/docs/How To/Outputs and Transactions/Send a Micro Transaction",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Send a Transaction",permalink:"/iotawalletnet/docs/How To/Outputs and Transactions/Send a Transaction"},next:{title:"NFTs",permalink:"/iotawalletnet/docs/category/nfts"}},c={},l=[{value:"Code Example",id:"code-example",level:2}],d={toc:l};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"send-a-micro-transaction"},"Send a Micro Transaction"),(0,o.kt)("h2",{id:"code-example"},"Code Example"),(0,o.kt)("p",null,"The following example will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Initialize your wallet"),(0,o.kt)("li",{parentName:"ol"},"Retrieve an account"),(0,o.kt)("li",{parentName:"ol"},"Send your micro transaction!")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'    public static class SendMicroTransactionExample\n    {\n        public static async Task Run()\n        {\n            //Register all of the dependencies into a collection of services\n            IServiceCollection services = new ServiceCollection().AddIotaWalletServices();\n\n            //Install services to service provider which is used for dependency injection\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n            //Use serviceprovider to create a scope, which disposes of all services at end of scope\n            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                //Request IWallet service from service provider\n                IWallet wallet = scope.ServiceProvider.GetRequiredService<IWallet>();\n\n                //Build wallet using a fluent-style configuration api\n                wallet = wallet\n                            .ConfigureWalletOptions()\n                                .SetCoinType(TypeOfCoin.Shimmer)\n                                .SetStoragePath("./walletdb")\n                                .Then()\n                            .ConfigureClientOptions()\n                                .AddNodeUrl("https://api.testnet.shimmer.network")\n                                .SetFaucetUrl("https://faucet.testnet.shimmer.network")\n                                .IsFallbackToLocalPow()\n                                .IsLocalPow()\n                                .Then()\n                            .ConfigureSecretManagerOptions()\n                                .SetPassword("password")\n                                .SetSnapshotPath("./mystronghold")\n                                .Then()\n                            .Initialize();\n\n\n                //Let\'s retrieve our cookiemonster account\n                (GetAccountResponse accountResponse, IAccount? account) = await wallet.GetAccountAsync("cookiemonster");\n                Console.WriteLine($"GetAccountAsync: {accountResponse}");\n\n                if (account == null)\n                {\n                    Console.WriteLine("There was a problem retreiving the account.");\n                    return;\n                }\n\n                await account.SyncAccountAsync();\n\n                //Let\'s send 1 Glow, followed by 2 glow, via a single transaction\n                //The below creates 2 outputs to the receiver address and 1 more output for your balance.\n                //Since a micro transaction creates dust for the receiver, the sender first pays a temporary storage deposit along with the sending micro amount.\n                // The receiver now bears the burden of whether to accept this transaction, as if he accepts it he needs to pay storage deposit and the sender\'s storage deposit\n                // would be returned back to the sender.\n                //Thus the receiver is given a choice of whether to acccept this transaction within the stipulated time as indicated\n                //by [expirationInSeconds].\n                //[1]If it expired, both the amount sent and storage deposit sent is returned back to the sender.\n                //[2]If receiver rejects the transaction,  both the amount sent and storage deposit sent is returned back to the sender.\n                //[3]If the receiver accepts the transaction, the sender\'s storage deposit is returned. In turn, the receiver now has to put in the storage deposit\n                //   to claim the micro amount.\n                string receiverAddress = "rms1qp8rknypruss89dkqnnuedm87y7xmnmdj2tk3rrpcy3sw3ev52q0vzl42tr";\n\n                SendMicroAmountResponse sendMicroAmountResponse = await account.SendMicroAmountUsingBuilder()\n                                                                        .AddAddressAndAmount(receiverAddress, 1, expirationInSeconds:120)\n                                                                        .AddAddressAndAmount(receiverAddress, 2, expirationInSeconds:60)\n                                                                        .SendMicroAmountAsync();\n\n\n                Console.WriteLine($"SendMicroAmountAsync: {sendMicroAmountResponse}");\n\n            }\n        }\n\n\n    }\n')))}u.isMDXComponent=!0}}]);