"use strict";(self.webpackChunkiotawallet_net_docs=self.webpackChunkiotawallet_net_docs||[]).push([[263],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7522:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:4},i="Periodic Syncing",c={unversionedId:"How To/Outputs and Transactions/Enable Periodic Syncing",id:"How To/Outputs and Transactions/Enable Periodic Syncing",title:"Periodic Syncing",description:"Code Example",source:"@site/docs/How To/Outputs and Transactions/Enable Periodic Syncing.md",sourceDirName:"How To/Outputs and Transactions",slug:"/How To/Outputs and Transactions/Enable Periodic Syncing",permalink:"/iotawalletnet/docs/How To/Outputs and Transactions/Enable Periodic Syncing",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Send a Micro Transaction",permalink:"/iotawalletnet/docs/How To/Outputs and Transactions/Send a Micro Transaction"},next:{title:"Claim Outputs Example",permalink:"/iotawalletnet/docs/How To/Outputs and Transactions/Claim Outputs"}},s={},l=[{value:"Code Example",id:"code-example",level:2}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"periodic-syncing"},"Periodic Syncing"),(0,a.kt)("h2",{id:"code-example"},"Code Example"),(0,a.kt)("p",null,"The following example will:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Initialize your wallet"),(0,a.kt)("li",{parentName:"ol"},"Retrieve an account"),(0,a.kt)("li",{parentName:"ol"},"Enable Periodic Syncing"),(0,a.kt)("li",{parentName:"ol"},"Check current balance"),(0,a.kt)("li",{parentName:"ol"},"Transfer some amount out"),(0,a.kt)("li",{parentName:"ol"},"Keep checking if your balance changes without manually syncing")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'    public static class PeriodicSyncingExample\n    {\n        public static async Task Run()\n        {\n            //Register all of the dependencies into a collection of services\n            IServiceCollection services = new ServiceCollection().AddIotaWalletServices();\n\n            //Install services to service provider which is used for dependency injection\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n            //Use serviceprovider to create a scope, which disposes of all services at end of scope\n            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                //Request IWallet service from service provider\n                IWallet wallet = scope.ServiceProvider.GetRequiredService<IWallet>();\n\n                //Build wallet using a fluent-style configuration api\n                wallet = wallet\n                            .ConfigureWalletOptions()\n                                .SetCoinType(TypeOfCoin.Shimmer)\n                                .SetStoragePath("./walletdb")\n                                .Then()\n                            .ConfigureClientOptions()\n                                .AddNodeUrl("https://api.testnet.shimmer.network")\n                                .SetFaucetUrl("https://faucet.testnet.shimmer.network")\n                                .IsFallbackToLocalPow()\n                                .IsLocalPow()\n                                .Then()\n                            .ConfigureSecretManagerOptions()\n                                .SetPassword("password")\n                                .SetSnapshotPath("./mystronghold")\n                                .Then()\n                            .Initialize();\n\n\n                //Let\'s retrieve our cookiemonster account\n                (GetAccountResponse accountResponse, IAccount? account) = await wallet.GetAccountAsync("cookiemonster");\n                Console.WriteLine($"GetAccountAsync: {accountResponse}");\n\n                if (account == null)\n                {\n                    Console.WriteLine("There was a problem retreiving the account.");\n                    return;\n                }\n\n                //Let\'s generate an address!\n                string address = (await account.GenerateAddressesAsync()).Payload!.First().Address!;\n\n                //Do a background sync every 10 seconds = 10000 milliseconds\n                await account.EnablePeriodicSyncing(10 * 1000);\n\n                //Get Initial Balance\n                string balance = (await account.GetBalanceAsync()).Payload!.BaseCoin.Total;\n                string tempBalance = new string(balance);\n\n                Console.WriteLine($"Current Balance is {balance} GLOWs.");\n\n                //Now we request shimmer tokens into that address\n                await account\n                    .SendAmountUsingBuilder()\n                    .AddAddressAndAmount("rms1qp8rknypruss89dkqnnuedm87y7xmnmdj2tk3rrpcy3sw3ev52q0vzl42tr", 1000000)\n                    .SendAmountAsync();\n\n\n                //If periodic syncing is successfull, after approximately 10-20 seconds, we are able to see our new balance\n                while (balance == tempBalance)\n                {\n\n                    Console.WriteLine("Getting balance in 5 seconds...");\n                    await Task.Delay(5000);\n                    balance = (await account.GetBalanceAsync()).Payload!.BaseCoin.Total;\n                    Console.WriteLine($"Current Balance is {balance} GLOWs.");\n                }\n\n                Console.WriteLine($"Periodic syncing worked! our new balance is {balance}");\n            }\n        }\n    }\n')))}p.isMDXComponent=!0}}]);